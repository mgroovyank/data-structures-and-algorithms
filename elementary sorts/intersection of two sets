/*
Intersection of two sets. Given two arrays \mathtt{a[]}a[] and \mathtt{b[]}b[],
each containing nn distinct 2D points in the plane, design a subquadratic algorithm
to count the number of points that are contained both in array \mathtt{a[]}a[]
and array \mathtt{b[]}b[].

Algorithm -
1.shell sort the two arrays
2.sort the two arrays a and b
3.for every element in sorted array-a search for it in sorted b
4.if no match is found for that value of i set j=i as j would have gone to last of array b
5.if match found then print that match value and break from the loop.
6.for the next value in the sorted array-a we need to start from where we left to check for a match.
*/
#include<stdio.h>
void shellsort(int arr[]);
int main(){
  int a[]={1,3,8,5,7,2,9};
  int b[]={2,9,4,6,1,8,7};
  shellsort(a);
  printf("\n");
  shellsort(b);
  printf("\n");
  int i,j;
  for(i=0;i<7;i++){
      for(j=0;j<7;j++){
          if(a[i]==b[j]){
              printf("%d",a[i]);
              break;
          }
      }
      if(j=6){//set j to 6 if the number is not found even to the end of array-b
          j=i;
      }
    }
  }
void shellsort(int arr[]){
  int t;
  int i,j;
  int length_arr=7;
  int h=1;
  while(h<length_arr/3){
    h=3*h+1;
  }
  while(h>0){
    for(i=h;i<length_arr;i++){
    for(j=i;j>0;j=j-h){
      if(arr[j-h]>=arr[j]){
        t=arr[j];
        arr[j]=arr[j-h];
        arr[j-h]=t;
        continue;
      }
      break;
    }

  }
  h=h/3;
  }
  for(i=0;i<length_arr;i++){
    printf(" %d ",arr[i]);
  }
  for(i=0;i<length_arr-1;i++){
    if(arr[i]<=arr[i+1]){
      continue;
    }else{
      printf("Insertion sort didn't work!!");
      break;
    }
  }
}

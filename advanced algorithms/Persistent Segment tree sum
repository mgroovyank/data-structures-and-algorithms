#include <iostream>
using namespace std;
#define MAXN 100 
struct node{
  int val;
  node *left,*right;
  node(){}
  node(node *l,node *r,int val){
    left=l;
    right=r;
    val=val;
  }
};
int arr[]={1,2,3,4,5};
node *version[MAXN];
void build(node *n,int low,int high){
  if(low==high){
    n->val=arr[low];
    return;
  }
  int mid=low+(high-low)/2;
  n->left=new node(NULL,NULL,0);
  n->right=new node(NULL,NULL,0);
  build(n->left,low,mid);
  build(n->right,mid+1,high);
  n->val=n->left->val+n->right->val;
}
void upgrade(node *prev,node *cur,int low,int high,int idx,int val){
  if(low==high){
    cur->val=val;
    return;
  }
  int mid=low+(high-low)/2;
  if(idx<=mid){
    cur->right=prev->right;
    cur->left=new node(NULL,NULL,0);
    upgrade(prev->left,cur->left,low,mid,idx,val);
  }else{
    cur->left=prev->left;
    cur->right=new node(NULL,NULL,0);
    upgrade(prev->right,cur->right,mid+1,high,idx,val);
  }
   cur->val=cur->left->val+cur->right->val;
}
int query(node *n,int low,int high,int l,int r){
  if(r<low || l>high ||low>high){
    return 0;
  }
  if(low>=l && high<=r){
    return n->val;
  }
  int mid=low+(high-low)/2;
  return query(n->left,low,mid,l,r)+query(n->right,mid+1,high,l,r);
}
int main(){
  int n=5;//size of arr
  node *root=new node(NULL,NULL,0);
  build(root,0,n-1);
  version[0]=root;
  version[1]=new node(NULL,NULL,0);
  upgrade(version[0],version[1],0,n-1,4,1);
  version[2]=new node(NULL,NULL,0);
  upgrade(version[1],version[2],0,n-1,2,10);
  cout<<query(version[1],0,n-1,0,4)<<"\n";
  cout<<query(version[2],0,n-1,3,4)<<"\n";
  cout<<query(version[0],0,n-1,0,3)<<"\n";
}
